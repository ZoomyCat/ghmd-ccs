#!/usr/bin/env bash
##Created by Edward "edge226" Tunnah.

## This command will index the website for all README.md files that exist saving to a variable and output to a new index.html.

conf=$( find . -name ghmd-ccs.config -type f -print )
usage=$( find . -name ghmd-ccs.usage -type f -print )
g2h=$( find . -name ghmd2html -type f -print )


source "$conf"
source "$usage"

while getopts "d:m:h" opt; do
    case "$opt" in
        m) mu=$OPTARG;;
        d)    md=$OPTARG;;
        h)      printf '%s\n' "$update_usage"; exit 0;;
        \?)     printf '%s\n' "$update_usage" >&2; exit 1;;
    esac
done

get_mds(){
  index_md=( $( find . -name "$md" -type f -print ) )
}

get_loc(){
  unset loc
  local struct="$1"
  loc=${struct%/*.md}
  loc="$loc/"
}

get_name(){
  #printf '\n%s %s\n' "location is currently" "$loc"
  if [[ "$loc" != "" ]] && [[ "$loc" != "./" ]]
    then
    name=${loc%"/"}
    name=${name##*/}
    #printf '\n%s %s\n' "name is:" "$name"
  fi
}

get_template(){
  get_name
  if [[ -f  "$loc""template/index-template.html" ]]
    then
    #printf '\n%s %s%s\n' "Setting template to:" "$loc" "template/index-template.html"
    template="$loc""template/index-template.html"
    loadcss="$loc""template/css.html"
    title="$loc""template/title.html"
    header="$loc""template/header.html"
    downloads="$loc""template/downloads.html"
    sidebar="$loc""template/sidebar.html"
    js="$loc""template/javascript.html"

  else
    #printf '\n%s %s\n' "loc is" "$loc"
    #pwd
    local temp_loc=${loc%/*/}
    template="$temp_loc""/template/index-template.html"
    loadcss="$temp_loc""/template/css.html"
    title="$loc""/template/title.html"
    header="$loc""/template/header.html"
    downloads="$temp_loc""/template/downloads.html"
    sidebar="$temp_loc""/template/sidebar.html"
    js="$loc""/template/javascript.html"
  fi
}

main(){
    get_mds
    for page in "${index_md[@]}"
    do
      get_loc "$page"

      get_template

      ##printf '\n\n%s %s\n' "The location of the current output file is:" "$loc$mu"
      ##printf '%s %s\n' "The current page is: " "$page"

        mu=${page##*/}
        if [[ "$mu" = "README.md" ]]
          then
          mu="index.html"
        else
          mu=${mu%%.md}
          mu="$mu.html"
        fi
        ##printf '\n%s %s\n' "mu is set to:" "$mu"

      if [[ -f "$loc$mu" ]]
        then
        rm "$loc$mu"
      fi

      if [[ ! -f "$loc$mu" ]]
        then
        touch "$loc$mu"
        printf '\n\n%s %s %s %s\n\n' "Now we are writing" "$template" "to" "$loc$mu"
      fi
        #printf '\n%s %s\n' "The template file is:" "$template"

      while IFS= read -r line; do ## Read through the file.

        if [[ "$line" = *" <p>Load CSS.</p>"* ]]
          then
          printf '\n%s %s %s %s\n\n' "Injecting" "$loadcss" "into" "$loc$mu"
          cat "$loadcss"
          cat "$loadcss" >> "$loc$mu"
          printf '\n%s\n' "Injection completed."
        elif [[ "$line" = *"<p>Title.</p>"* ]]
          then
          printf '\n%s %s %s %s\n\n' "Injecting" "$title" "into" "$loc$mu"
          cat "$title"
          cat "$title" >> "$loc$mu"
          printf '\n%s\n' "Injection completed."
        elif [[ "$line" = *"<p>Header.</p>"* ]]
          then
          printf '\n%s %s %s %s\n\n' "Injecting" "$header" "into" "$loc$mu"
          cat "$header"
          cat "$header" >> "$loc$mu"
          printf '\n%s\n' "Injection completed."
        elif [[ "$line" = *"<p>Downloads.</p>"* ]]
          then
          printf '\n%s %s %s %s\n\n' "Injecting" "$downloads" "into" "$loc$mu"
          cat "$downloads"
          cat "$downloads" >> "$loc$mu"
          printf '\n%s\n' "Injection completed."
        elif [[ "$line" = *"<p>Sidebar.</p>"* ]]
          then
          printf '\n%s %s %s %s\n\n' "Injecting" "$sidebar" "into" "$loc$mu"
          cat "$sidebar"
          cat "$sidebar" >> "$loc$mu"
          printf '\n%s\n' "Injection completed."
        elif [[ "$line" = *"<p>Sidebar.</p>"* ]]
          then
          printf '\n%s %s %s %s\n\n' "Injecting" "$js" "into" "$loc$mu"
          cat "$js"
          cat "$js" >> "$loc$mu"
          printf '\n%s\n' "Injection completed."
        elif [[ "$line" = *"<p>Template.</p>"* ]]
          then
          printf '\n%s %s %s %s\n\n' "Injecting" "$page" "into" "$loc$mu"
          "$g2h" -d "$page"
          "$g2h" -d "$page" >> "$loc$mu"
          printf '\n%s\n' "Injection completed."
        else
          printf '%s\n' "$line"
          printf '%s\n' "$line" >> "$loc$mu"
        fi
      done < "$template" ## The template file is what is read.
      printf '\n%s %s %s\n' "Writing of" "$template" "completed."
    done
    exit 0
}
main
