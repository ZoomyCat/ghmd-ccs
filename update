#!/usr/bin/env bash
##Created by Edward "edge226" Tunnah.

## This command will index the website for all .md files that exist merging it with some template html to create a final product.

## These store the variables of where ghmd-ccs.config and where ghmd-ccs.usage are located.
## The source commands read the config and usage file and load the variables stored within each of them.
conf=$( find . -name ghmd-ccs.config -type f -print )
usage=$( find . -name ghmd-ccs.usage -type f -print )
source "$conf"
source "$usage"

## This checks the - flags sent to update. The only one available is a help file that states what it does. $update_usage comes from $usage.
while getopts "h" opt; do
    case "$opt" in
        h)      printf '%s\n' "$update_usage"; exit 0;;
        \?)     printf '%s\n' "$update_usage" >&2; exit 1;;
    esac
done

get_mds(){ ## Find all the .md files and save them to an index_md array.
  index_md=( $( find . -name "$md" -type f -print ) ) ## $md is defined in $conf and contains *.md
}

get_loc(){ ## Grab the location and strip the .md file off the start then add the proceeding /
  ## Unset the loc variable if it is already set.
  unset loc
  local struct="$1" ## Grab the first entry that was passed to this function and set it to a local
  ##variable called struct. It will always contain a .md file.
  loc=${struct%/*.md} ## remove the file extension and strip the file name.
  loc="$loc/" ## Add the forward slash back on because it will be a directory.
}

get_template(){
  local temp_loc="$loc"
  if [[ ! -f  "$temp_loc""template/index-template.html" ]]
    then
    ## Move remove a subdirectory until we find the corrct directory and then
    ## set the template variables for usage.
    local temp_loc=${loc%/*/}
    temp_loc="$temp_loc/"
    while [[ ! -f "$temp_loc""template/index-template.html" ]]
    do
      temp_loc=${temp_loc%/*/}
      temp_loc="$temp_loc/"
    done
  fi

  ## If you run a linter program then these variables will show a error that the variables are unused.
  ## The variables are used in inject html and referenced through the ${inject_file[$i]} reference.
  template="$temp_loc""template/index-template.html"
  meta="$temp_loc""template/meta.html"
  loadcss="$temp_loc""template/css.html"
  title="$temp_loc""template/title.html"
  header="$temp_loc""template/header.html"
  downloads="$temp_loc""template/downloads.html"
  sidebar="$temp_loc""template/sidebar.html"
  js="$temp_loc""template/javascript.html"
}

## check if the lines contain an injection tag and if they do inject the corresponding file.
inject_html(){
  unset i pass
  for tag in "${inject_tag[@]}"
  do
    if [[ "$i" = "" ]]
      then
      i=0
    fi
    if [[ "$line" = *"$tag"* ]]
      then
      typeset -n local ref=${inject_file[$i]}
      #printf '\n%s %s %s %s\n\n' "Injecting" "$ref" "into" "$loc$mu"
      #"${inject_cmd[i]}" "$ref"
      "${inject_cmd[i]}" "$ref" >> "$loc$mu"
      #printf '\n%s\n' "Injection completed."
      pass=0
      break
    fi
    i="$i"+1
  done
}

main(){
    get_mds  ## grab the markdown files.
    for page in "${index_md[@]}"  ## Create a site for each markdown file.
    do
      get_loc "$page"  ## get the location of the markdown file.
      get_template  ## set all template variables.
        mu=${page##*/}  ## remove all prefixes to get the name of the markdown file.
        if [[ "$mu" = "README.md" ]]
          then
          mu="index.html" ## If the markdown file is README.md then use index.html
        else
        ## Otherwise strip the .md extension and use the name of the .md file as the name of the html file..
          mu=${mu%%.md}
          mu="$mu.html"
        fi
      if [[ -f "$loc$mu" ]]
        ## If the markup file already exists then remove it.
        then
        rm "$loc$mu"
      fi
      if [[ ! -f "$loc$mu" ]]
        ## Create a new blank markup file.
        then
        touch "$loc$mu"
        #printf '\n\n%s %s %s %s\n\n' "Now we are writing" "$template" "to" "$loc$mu"
      fi
      while IFS= read -r line; do ## Read through the file.
        inject_html  ##  Check for html injection and write if needed.
        if [[ "$pass" != "0" ]]
          ## If nothing else wrote a line then this should.
          then
          #printf '%s\n' "$line"
          printf '%s\n' "$line" >> "$loc$mu"
        fi
      done < "$template" ## The template file is what is read.
      #printf '\n%s %s %s\n' "Writing of" "$template" "completed."
    done
    exit 0
}
main
